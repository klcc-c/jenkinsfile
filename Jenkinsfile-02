pipeline {
    // 选择全局运行的节点
    agent {
        label 'build-01'
    }

    // 全局变量
    environment {
        VERSION = "1.1.1"
    }

    // 运行选项 
    options {
        // 丢弃旧的构建 5天和 15个
        buildDiscarder logRotator(artifactDaysToKeepStr: '', 
                                  artifactNumToKeepStr: '', 
                                  daysToKeepStr: '5', 
                                  numToKeepStr: '15')
        //不允许并发                          
        disableConcurrentBuilds() 
    }

    // 构建参数
    parameters {
        string defaultValue: 'lzj', description: 'NAME info', name: 'NAME'
        choice choices: ['dev', 'test', 'uat'], description: 'env names', name: 'ENVNAME'
    }

    // 构建触发器
    //triggers {
    //    cron 'H * * * *'  // 定时
    //}

    stages {
        stage('bulid') {
            agent {
                label 'build-01'  // 该步骤会在标签linux上运行
            }
            // 局部变量
            environment {
                VERSION = "1.1.2"
            }

            steps {
                echo 'build'

                // print env
                echo "${VERSION}"  // 局部大于全局变量

                // print param
                echo "${params.NAME}"
                echo "${params.ENVNAME}"
            }
        }

        stage('test') {
            input {
                message '接下来的操作'
                ok 'ok'
                submitterParameter 'approve_user'
                parameters {
                    choice choices: ['deploy', 'rollback'], name: 'ops'
                }
            }

            steps {
                echo 'test'
                echo "执行动作: ${ops}"
                echo "批准用户: ${approve_user}"

                script {
                    // 由于下个stage 无法获取ops的值，特此定义一个新的全局变量
                    // env. 定义全局变量
                    env.OPS = "${ops}"
                }
            }
        }

        stage('deploy') {
            // 当ops 的值是deploy才执行  是否运行
            when {
                environment name: 'OPS', value: 'deploy'
            }
            steps {
                script{
                    // groovy script
                    println("hello world")
                    result = sh returnStdout: true, script: 'echo 123' // 123\n
                    println(result - "\n")  // \n 就减掉了

                    // enviroment self 内置变量
                    println("build id: ${BUILD_ID}")  // 构建id
                    println("job name: ${JOB_NAME}")  // 构建名称
                }
                echo 'deploy'
            }
        }

        stage("parallelstage"){
            failFast true
            parallel {
                stage("build01") {
                    steps {
                        echo "windows "
                    }
                }

                stage("build02") {
                    steps {
                        echo "linux"
                    }
                }
            }
        }

    }
    post {
        always {
            echo "always"
        }
        success {
            // One or more steps need to be included within each condition's block.
            echo "success"
        }
        failure {
            // One or more steps need to be included within each condition's block.
            echo "failure"
        }
    }
}
